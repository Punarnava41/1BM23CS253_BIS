import numpy as np
import cv2
import random
from PIL import Image
from google.colab.patches import cv2_imshow

# 1. Define Objective Function (Example: based on image entropy)
def objective_function(params, image):
    # params could represent parameters for color enhancement, e.g., [alpha, beta, gamma] for a transformation
    # For simplicity, let's assume params are a single value for a simple adjustment (e.g., brightness)
    # In a real scenario, this function would be more complex and image-specific.
    adjusted_image = image.copy().astype(np.float32) * params[0] # Example: simple brightness adjustment

    # Calculate entropy as a measure of information content
    hist, _ = np.histogram(adjusted_image.flatten(), 256, [0, 256])
    hist = hist / hist.sum()
    entropy = -np.sum(hist * np.log2(hist + 1e-9)) # Add small value to avoid log(0)

    # We want to maximize entropy, so minimize negative entropy
    return -entropy

# 2. Implement GWO Algorithm
def grey_wolf_optimizer(objective_func, bounds, n_wolves, dim, max_iter, image):
    # Initialize n wolves randomly
    wolves = np.random.uniform(bounds[0], bounds[1], size=(n_wolves, dim))

    # Set X_alpha, X_beta, X_delta scores to infinity
    alpha_score = float('inf')
    beta_score = float('inf')
    delta_score = float('inf')

    alpha_pos = np.zeros(dim)
    beta_pos = np.zeros(dim)
    delta_pos = np.zeros(dim)

    for t in range(1, max_iter + 1):
        a = 2 - 2 * t / max_iter  # decreases from 2 to 0

        for i in range(n_wolves):
            # Evaluate fitness
            fitness = objective_func(wolves[i], image)

            # Update alpha, beta, delta
            if fitness < alpha_score:
                alpha_score = fitness
                alpha_pos = wolves[i].copy()
            elif fitness < beta_score:
                beta_score = fitness
                beta_pos = wolves[i].copy()
            elif fitness < delta_score:
                delta_score = fitness
                delta_pos = wolves[i].copy()

        for i in range(n_wolves):
            for j in range(dim):
                r1, r2 = random.random(), random.random()
                A1 = 2 * a * r1 - a
                C1 = 2 * r2
                D_alpha = abs(C1 * alpha_pos[j] - wolves[i, j])
                X1 = alpha_pos[j] - A1 * D_alpha

                r1, r2 = random.random(), random.random()
                A2 = 2 * a * r1 - a
                C2 = 2 * r2
                D_beta = abs(C2 * beta_pos[j] - wolves[i, j])
                X2 = beta_pos[j] - A2 * D_beta

                r1, r2 = random.random(), random.random()
                A3 = 2 * a * r1 - a
                C3 = 2 * r2
                D_delta = abs(C3 * delta_pos[j] - wolves[i, j])
                X3 = delta_pos[j] - A3 * D_delta

                wolves[i, j] = (X1 + X2 + X3) / 3

                # Apply boundary constraints
                wolves[i, j] = np.clip(wolves[i, j], bounds[0], bounds[1])

    return alpha_pos, alpha_score

# 3. Apply GWO to Image
# Load an example image (replace with your image path)
# You might need to upload an image to your Colab environment or use a public URL
try:
    # MODIFY THIS LINE WITH YOUR IMAGE PATH
    img = cv2.imread('/content/sample_data/input_image.jpg', cv2.IMREAD_GRAYSCALE) # Load as grayscale for this example objective function
    if img is None:
         raise FileNotFoundError("Image not found. Please upload an image named 'input_image.jpg' or update the path.")

    # Define bounds for the optimization parameters (e.g., brightness multiplier)
    # For a simple brightness adjustment, bounds could be [0.1, 2.0]
    bounds = [0.1, 2.0]
    dim = 1 # Number of parameters to optimize

    # GWO parameters
    n_wolves = 30
    max_iter = 100

    # Run GWO
    best_params, best_score = grey_wolf_optimizer(objective_function, bounds, n_wolves, dim, max_iter, img)

    print(f"Best parameters found by GWO: {best_params}")
    print(f"Best score found by GWO: {best_score}")

    # Apply the best parameters found by GWO to the image
    gwo_enhanced_img = img.copy().astype(np.float32) * best_params[0]
    gwo_enhanced_img = np.clip(gwo_enhanced_img, 0, 255).astype(np.uint8)

    # Apply a fixed brightness adjustment for visual comparison
    fixed_brightness_multiplier = 1.5 # You can change this value
    fixed_enhanced_img = img.copy().astype(np.float32) * fixed_brightness_multiplier
    fixed_enhanced_img = np.clip(fixed_enhanced_img, 0, 255).astype(np.uint8)


    # Display the original and enhanced images
    print("Original Image:")
    cv2_imshow(img)
    print("GWO Enhanced Image:")
    cv2_imshow(gwo_enhanced_img)
    print(f"Image with Fixed Brightness Multiplier ({fixed_brightness_multiplier}):")
    cv2_imshow(fixed_enhanced_img)


    # Save the enhanced images (optional)
    # cv2.imwrite('gwo_enhanced_image.jpg', gwo_enhanced_img)
    # cv2.imwrite('fixed_enhanced_image.jpg', fixed_enhanced_img)

except FileNotFoundError as e:
    print(e)
except Exception as e:
    print(f"An error occurred: {e}")
